---
esphome:
  name: $device_name
  comment: $device_comment
  build_path: build/test3.1
  includes:
    - custom.h

esp8266:
  board: d1_mini

substitutions:
  device_name: test3-1
  device_comment: test3-1 device
  min_sub: "0.03"
  max_sub: "12.0%"

api:

wifi:
  ssid: "MySSID"
  password: "password1"

network:
  enable_ipv6: true

web_server:
  port: 80
  version: 2

i2c:
  sda:
    allow_other_uses: true
    number: 4
  scl:
    allow_other_uses: true
    number: 5
  scan: false

spi:
  clk_pin:
    allow_other_uses: true
    number: GPIO12
  mosi_pin:
    number: GPIO13
  miso_pin:
    allow_other_uses: true
    number: GPIO14

ota:
  version: 2

logger:

debug:

sensor:
  - platform: adc
    pin: VCC
    id: my_sensor
    filters:
      - offset: 5.0
      - multiply: 2.0
      - filter_out: NAN
      - sliding_window_moving_average:
      - exponential_moving_average:
      - quantile:
          window_size: 5
          send_every: 5
          send_first_at: 3
          quantile: .8
      - lambda: "return 0;"
      - delta: 100
      - throttle: 100ms
      - debounce: 500s
      - timeout: 10min
      - timeout:
          timeout: 10min
          value: 0
      - calibrate_linear:
          method: exact
          datapoints:
            - -1 -> 3
            - 0.0 -> 1.0
            - 1.0 -> 2.0
            - 2.0 -> 3.0
      - calibrate_polynomial:
          degree: 3
          datapoints:
            - 0 -> 0
            - 100 -> 200
            - 400 -> 500
            - -50 -> -1000
            - -100 -> -10000
  - platform: tcs34725
    red_channel:
      name: Red Channel
    green_channel:
      name: Green Channel
    blue_channel:
      name: Blue Channel
    clear_channel:
      name: Clear Channel
    illuminance:
      name: Illuminance
    color_temperature:
      name: Color Temperature
    integration_time: 614ms
    gain: 60x
  - platform: custom
    lambda: |-
      auto s = new CustomSensor();
      App.register_component(s);
      return {s};
    sensors:
      - id: custom_sensor
        name: Custom Sensor

  - platform: tmp102
    name: TMP102 Temperature
  - platform: hm3301
    pm_1_0:
      name: PM1.0
    pm_2_5:
      name: PM2.5
    pm_10_0:
      name: PM10.0
    aqi:
      name: AQI
      calculation_type: AQI
  - platform: tof10120
    name: Distance sensor
    update_interval: 5s

  - platform: mlx90393
    oversampling: 1
    filter: 0
    gain: 3X
    x_axis:
      name: mlxxaxis
    y_axis:
      name: mlxyaxis
    z_axis:
      name: mlxzaxis
      resolution: 17BIT
    temperature:
      name: mlxtemp
      oversampling: 2

mpr121:
  id: mpr121_first
  address: 0x5A

binary_sensor:
  - platform: mpr121
    id: touchkey0
    channel: 0
    name: touchkey0
  - platform: mpr121
    channel: 1
    name: touchkey1
    id: bin1
  - platform: mpr121
    channel: 2
    name: touchkey2
    id: bin2
  - platform: mpr121
    channel: 3
    name: touchkey3
    id: bin3
    on_press:
      then:
        - switch.toggle: mpr121_toggle
  - platform: ttp229_lsf
    channel: 1
    name: TTP229 LSF Test
  - platform: ttp229_bsf
    channel: 1
    name: TTP229 BSF Test
  - platform: custom
    lambda: |-
      auto s = new CustomBinarySensor();
      App.register_component(s);
      return {s};
    binary_sensors:
      - id: custom_binary_sensor
        name: Custom Binary Sensor

globals:
  - id: my_global_string
    type: std::string
    initial_value: '""'

text_sensor:
  - platform: custom
    lambda: |-
      auto s = new CustomTextSensor();
      App.register_component(s);
      return {s};
    text_sensors:
      - id: custom_text_sensor
        name: Custom Text Sensor

sm2135:
  data_pin:
    allow_other_uses: true
    number: GPIO12
  clock_pin:
    allow_other_uses: true
    number: GPIO14
  rgb_current: 20mA
  cw_current: 60mA

switch:
  - platform: template
    name: mpr121_toggle
    id: mpr121_toggle
    optimistic: true
  - platform: gpio
    id: gpio_switch1
    pin:
      mcp23xxx: mcp23017_hub
      number: 0
      mode: OUTPUT
    interlock: &interlock [gpio_switch1, gpio_switch2, gpio_switch3]
  - platform: gpio
    id: gpio_switch2
    pin:
      mcp23xxx: mcp23008_hub
      number: 0
      mode: OUTPUT
    interlock: *interlock
  - platform: gpio
    id: gpio_switch3
    pin:
      number: GPIO1
    interlock: *interlock
  - platform: custom
    lambda: |-
      auto s = new CustomSwitch();
      return {s};
    switches:
      - id: custom_switch
        name: Custom Switch
        on_turn_on:
          - http_request.get:
              url: https://esphome.io
              headers:
                Content-Type: application/json
              verify_ssl: false
          - http_request.post:
              url: https://esphome.io
              verify_ssl: false
              json:
                key: !lambda |-
                  return id(custom_text_sensor).state;
                greeting: Hello World
          - http_request.send:
              method: PUT
              url: https://esphome.io
              headers:
                Content-Type: application/json
              body: Some data
              verify_ssl: false

custom_component:
  lambda: |-
    auto s = new CustomComponent();
    s->set_update_interval(15000);
    return {s};

cover:
  - platform: time_based
    name: Time Based Cover
    id: time_based_cover
    stop_action:
      - switch.turn_on: gpio_switch1
    open_action:
      - switch.turn_on: gpio_switch1
    open_duration: 5min
    close_action:
      - switch.turn_on: gpio_switch2
    close_duration: 4.5min

output:
  - platform: esp8266_pwm
    id: out
    pin:
      number: D3
    frequency: 50Hz
  - platform: custom
    type: binary
    lambda: |-
      auto s = new CustomBinaryOutput();
      App.register_component(s);
      return {s};
    outputs:
      - id: custom_binary
  - platform: sigma_delta_output
    id: sddac
    update_interval: 60s
    pin:
      number: D4
    turn_on_action:
      then:
        - logger.log: "Turned on"
    turn_off_action:
      then:
        - logger.log: "Turned off"
    state_change_action:
      then:
        - logger.log:
            format: "Changed state: %d"
            args: ["state"]
  - platform: custom
    type: float
    lambda: |-
      auto s = new CustomFloatOutput();
      App.register_component(s);
      return {s};
    outputs:
      - id: custom_float
  - platform: slow_pwm
    pin:
      allow_other_uses: true
      number: GPIO5
    id: my_slow_pwm
    period: 15s
    restart_cycle_on_state_change: false
  - platform: sm2135
    id: sm2135_0
    channel: 0
  - platform: sm2135
    id: sm2135_1
    channel: 1
  - platform: sm2135
    id: sm2135_2
    channel: 2
  - platform: sm2135
    id: sm2135_3
    channel: 3
  - platform: sm2135
    id: sm2135_4
    channel: 4

mcp23017:
  id: mcp23017_hub

mcp23008:
  id: mcp23008_hub

servo:
  id: my_servo
  output: out
  restore: true
  min_level: $min_sub
  max_level: $max_sub

ttp229_lsf:

ttp229_bsf:
  sdo_pin:
    allow_other_uses: true
    number: D2
  scl_pin:
    allow_other_uses: true
    number: D1

display:
  - platform: max7219digit
    cs_pin:
      number: GPIO15
    num_chips: 4
    rotate_chip: 0
    intensity: 10
    scroll_mode: STOP
    id: my_matrix
    lambda: |-
      it.printdigit("hello");

http_request:
  useragent: esphome/device
  timeout: 10s

button:
  - platform: output
    id: output_button
    output: out
    duration: 100ms
