#!/usr/bin/env python3

from __future__ import print_function

import argparse
import multiprocessing
import os
import re
import shutil
import subprocess
import sys
import tempfile
import threading

import click
import pexpect

sys.path.append(os.path.dirname(__file__))
from helpers import basepath, shlex_quote, get_output, build_compile_commands, \
    build_all_include, temp_header_file, git_ls_files, filter_changed

is_py2 = sys.version[0] == '2'

if is_py2:
    import Queue as queue
else:
    import queue as queue


def run_tidy(args, tmpdir, queue, lock, failed_files):
    while True:
        path = queue.get()
        invocation = ['clang-tidy-11', '-header-filter=^{}/.*'.format(re.escape(basepath))]
        if tmpdir is not None:
            invocation.append('-export-fixes')
            # Get a temporary file. We immediately close the handle so clang-tidy can
            # overwrite it.
            (handle, name) = tempfile.mkstemp(suffix='.yaml', dir=tmpdir)
            os.close(handle)
            invocation.append(name)
        invocation.append('-p=.')
        if args.quiet:
            invocation.append('-quiet')
        for arg in ['-Wfor-loop-analysis', '-Wshadow-field', '-Wshadow-field-in-constructor']:
            invocation.append('-extra-arg={}'.format(arg))
        invocation.append(os.path.abspath(path))
        invocation_s = ' '.join(shlex_quote(x) for x in invocation)

        # Use pexpect for a pseudy-TTY with colored output
        output, rc = pexpect.run(invocation_s, withexitstatus=True, encoding='utf-8',
                                 timeout=15 * 60)
        with lock:
            if rc != 0:
                print()
                print("\033[0;32m************* File \033[1;32m{}\033[0m".format(path))
                print(output)
                print()
                failed_files.append(path)
        queue.task_done()


def progress_bar_show(value):
    if value is None:
        return ''


def split_list(a, n):
    k, m = divmod(len(a), n)
    return [a[i * k + min(i, m):(i + 1) * k + min(i + 1, m)] for i in range(n)]


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-j', '--jobs', type=int,
                        default=multiprocessing.cpu_count(),
                        help='number of tidy instances to be run in parallel.')
    parser.add_argument('files', nargs='*', default=[],
                        help='files to be processed (regex on path)')
    parser.add_argument('--fix', action='store_true', help='apply fix-its')
    parser.add_argument('-q', '--quiet', action='store_false',
                        help='Run clang-tidy in quiet mode')
    parser.add_argument('-c', '--changed', action='store_true',
                        help='Only run on changed files')
    parser.add_argument('--split-num', type=int, help='Split the files into X jobs.',
                        default=None)
    parser.add_argument('--split-at', type=int, help='Which split is this? Starts at 1',
                        default=None)
    parser.add_argument('--all-headers', action='store_true',
                        help='Create a dummy file that checks all headers')
    args = parser.parse_args()

    try:
        get_output('clang-tidy-11', '-version')
    except:
        print("""
        Oops. It looks like clang-tidy-11 is not installed.

        Please check you can run "clang-tidy-11 -version" in your terminal and install
        clang-tidy (v11) if necessary.

        Note you can also upload your code as a pull request on GitHub and see the CI check
        output to apply clang-tidy.
        """)
        return 1

    build_all_include()
    build_compile_commands()

    files = []
    for path in git_ls_files():
        filetypes = ('.cpp',)
        ext = os.path.splitext(path)[1]
        if ext in filetypes:
            path = os.path.relpath(path, os.getcwd())
            files.append(path)
    # Match against re
    file_name_re = re.compile('|'.join(args.files))
    files = [p for p in files if file_name_re.search(p)]

    if args.changed:
        files = filter_changed(files)

    files.sort()

    if args.split_num:
        files = split_list(files, args.split_num)[args.split_at - 1]

    if args.all_headers and args.split_at in (None, 1):
        files.insert(0, temp_header_file)

    tmpdir = None
    if args.fix:
        tmpdir = tempfile.mkdtemp()

    failed_files = []
    return_code = 0
    try:
        task_queue = queue.Queue(args.jobs)
        lock = threading.Lock()
        for _ in range(args.jobs):
            t = threading.Thread(target=run_tidy,
                                 args=(args, tmpdir, task_queue, lock, failed_files))
            t.daemon = True
            t.start()

        # Fill the queue with files.
        with click.progressbar(files, width=30, file=sys.stderr,
                               item_show_func=progress_bar_show) as bar:
            for name in bar:
                task_queue.put(name)

        # Wait for all threads to be done.
        task_queue.join()
        return_code = len(failed_files)

    except KeyboardInterrupt:
        print()
        print('Ctrl-C detected, goodbye.')
        if tmpdir:
            shutil.rmtree(tmpdir)
        os.kill(0, 9)

    if args.fix and failed_files:
        print('Applying fixes ...')
        try:
            subprocess.call(['clang-apply-replacements-11', tmpdir])
        except:
            print('Error applying fixes.\n', file=sys.stderr)
            raise

    return return_code


if __name__ == '__main__':
    sys.exit(main())
