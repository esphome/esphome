; This PlatformIO project is for development purposes *only*: clang-tidy derives its compilation
; database from here, and IDEs like CLion and VSCode also use it. This does not actually create a
; usable binary.
; It's *not* used during runtime.

[platformio]
default_envs = esp8266, esp32
src_dir = esphome
include_dir =

[runtime]
; This are the flags as set by the runtime.
build_flags =
    -Wno-unused-variable
    -Wno-unused-but-set-variable
    -Wno-sign-compare

[clangtidy]
; This are the flags for clang-tidy.
build_flags =
    -Wall
    -Wunreachable-code
    -Wfor-loop-analysis
    -Wshadow-field
    -Wshadow-field-in-constructor

[common]
lib_deps =
    ottowinter/AsyncMqttClient-esphome@0.8.4              ; mqtt
    ottowinter/ArduinoJson-esphomelib@5.13.3              ; json
    esphome/ESPAsyncWebServer-esphome@1.3.0               ; web_server_base
    fastled/FastLED@3.3.2                                 ; fastled_base
    makuna/NeoPixelBus@2.6.7                              ; neopixelbus
    mikalhart/TinyGPSPlus@1.0.2                           ; gps
    freekode/TM1651@1.0.1                                 ; tm1651
    seeed-studio/Grove - Laser PM2.5 Sensor HM3301@1.0.3  ; hm3301
    glmnet/Dsmr@0.5                                       ; dsmr
    rweather/Crypto@0.2.0                                 ; dsmr
    esphome/noise-c@0.1.1                                 ; api
    dudanov/MideaUART@1.1.0                               ; midea
build_flags =
    -DESPHOME_LOG_LEVEL=ESPHOME_LOG_LEVEL_VERY_VERBOSE
src_filter =
    +<./>
    +<../tests/dummy_main.cpp>
    +<../.temp/all-include.cpp>

[common:esp8266]
extends = common
; when changing this also copy it to esphome-docker-base images
platform = platformio/espressif8266 @ 3.2.0
platform_packages =
    platformio/framework-arduinoespressif8266 @ ~3.30002.0

framework = arduino
board = nodemcuv2
lib_deps =
    ${common.lib_deps}
    ESP8266WiFi                           ; wifi (Arduino built-in)
    Update                                ; ota (Arduino built-in)
    ottowinter/ESPAsyncTCP-esphome@1.2.3  ; async_tcp
build_flags =
    ${common.build_flags}
    -DUSE_ESP8266

[common:esp32]
extends = common
; when changing this also copy it to esphome-docker-base images
platform = platformio/espressif32 @ 3.3.2
platform_packages =
    platformio/framework-arduinoespressif32 @ ~3.10006.0

framework = arduino
board = nodemcu-32s
lib_deps =
    ${common.lib_deps}
    Hash                            ; ota (Arduino built-in)
    esphome/AsyncTCP-esphome@1.2.2  ; async_tcp
build_flags =
    ${common.build_flags}
    -DUSE_ESP32
src_filter = ${common.src_filter}

[common:espidf]
; when changing this also copy it to esphome-docker-base images
platform = platformio/espressif32 @ 3.3.2
platform_packages =
    platformio/framework-espidf @ ~3.40300.0

framework = espidf
board = nodemcu-32s
lib_deps =
    esphome/noise-c@0.1.1  ; used by api
    espressif/esp32-camera@1.0.0  ; used by esp32_camera
    NeoPixelBus@2.6.7
build_flags =
    ${common.build_flags}
    ${common:esp32.build_flags}
    -DUSE_ESP_IDF
    -DUSE_ESP32_FRAMEWORK_ESP_IDF
src_filter = ${common:esp32.src_filter}

[env:esp8266]
extends = common:esp8266
build_flags =
    ${common:esp8266.build_flags}
    ${runtime.build_flags}
    -DUSE_ARDUINO
    -DUSE_ESP8266_FRAMEWORK_ARDUINO

[env:esp8266-tidy]
extends = common:esp8266
build_flags =
    ${common:esp8266.build_flags}
    ${clangtidy.build_flags}
    -DUSE_ARDUINO
    -DUSE_ESP8266_FRAMEWORK_ARDUINO

[env:esp32]
extends = common:esp32
build_flags =
    ${common:esp32.build_flags}
    ${runtime.build_flags}
    -DUSE_ARDUINO
    -DUSE_ESP32_FRAMEWORK_ARDUINO

[env:esp32-tidy]
extends = common:esp32
build_flags =
    ${common:esp32.build_flags}
    ${clangtidy.build_flags}
    -DUSE_ARDUINO
    -DUSE_ESP32_FRAMEWORK_ARDUINO

[env:esp32-idf]
extends = common:espidf
build_flags =
    ${common:espidf.build_flags}
    ${runtime.build_flags}


[env:esp32-idf-tidy]
extends = common:espidf
build_flags =
    ${common:espidf.build_flags}
    ${clangtidy.build_flags}
